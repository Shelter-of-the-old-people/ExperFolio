1번과 2번을 수정했고, 3번, 4번은 수정하지 않아도 괜찮은 부분이야. 그래서 아래와 같이 변경되었어.

```
# Experfolio MongoDB 포트폴리오 관리 Use Case

## 1. 포트폴리오 생성 Use Case

### 1.1 포트폴리오 Document 생성

**Actor**: 구직자(JOB_SEEKER)

**Goal**: MongoDB에 새로운 포트폴리오 문서 생성

**Pre-condition**:

- 사용자가 JOB_SEEKER 역할로 로그인됨 (JWT 인증 완료)
- PostgreSQL User 테이블에 사용자 정보 존재
- MongoDB 연결 활성화

**Main Flow**:

1. 구직자가 포트폴리오 생성 API 호출
2. BasicInfo 입력
    - name (필수)
    - schoolName (필수)
    - major (필수)
    - gpa (선택)
    - desiredPosition (선택)
    - referenceUrl (선택, 배열)
    - awards (선택, 배열)
    - certifications (선택, 배열)
    - languages (선택, 배열)
3. MongoDB PortfolioDocument 생성
    - userId 연결 (PostgreSQL User.id)
    - portfolioItems 빈 배열로 초기화
    - processingStatus.needsEmbedding = true
4. PostgreSQL JobSeekerProfile에 portfolioId 저장

**Post-condition**:

- MongoDB에 Portfolio Document 생성됨
- PostgreSQL JobSeekerProfile과 연결됨
- 임베딩 대기 상태

**Exception Flow**:

- E1: MongoDB 연결 실패 → 500 에러 반환
- E2: 필수 필드 누락 → 400 에러 반환
- E3: 중복 포트폴리오 생성 시도 → 409 에러 반환

---

## 2. 포트폴리오 조회 및 수정 Use Case

### 2.1 포트폴리오 전체 조회

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 본인의 포트폴리오 Document 조회

**Main Flow**:

1. 구직자가 포트폴리오 조회 API 호출
2. JWT 토큰에서 userId 추출
3. MongoDB에서 userId로 PortfolioDocument 조회
4. PortfolioResponseDto 변환 및 반환
    - basicInfo
    - portfolioItems (order 순 정렬)
    - portfolioItemCount
    - processingStatus

**Post-condition**:
- 포트폴리오 전체 정보 반환

**Exception Flow**:
- E1: 포트폴리오 미존재 → 404 에러 반환

### 2.2 BasicInfo 수정

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 기본 정보 업데이트

**Main Flow**:

1. BasicInfoDto로 수정 요청
2. MongoDB Document의 basicInfo 필드 업데이트
3. processingStatus.needsEmbedding = true 설정
4. updatedAt 자동 갱신

**Post-condition**:

- BasicInfo 업데이트 완료
- RAG 재임베딩 대기 상태

---

## 3. 포트폴리오 아이템 관리 Use Case

### 3.1 포트폴리오 아이템 추가

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 프로젝트/활동/연구 등 아이템 추가 (최대 5개)

**Pre-condition**:

- 포트폴리오가 이미 존재함
- 현재 아이템 개수 < 5개

**Main Flow**:

1. PortfolioItemDto 입력
    - type (project, activity, research, other)
    - title (필수)
    - content (필수)
    - attachments (선택, MultipartFile[])
2. 파일 업로드 시 FileStorageClient 호출
    - 로컬 파일 시스템에 저장
    - attachments.filePath 반환
3. 첨부파일이 있으면 extractionStatus = UNFINISHED 설정
4. 새 PortfolioItemEmbedded 생성 및 배열에 추가
5. order 자동 부여 (기존 최대값 + 1)
6. processingStatus.needsEmbedding = true

**Post-condition**:

- portfolioItems 배열에 추가됨
- OCR 처리 대기 상태 (첨부파일 있을 시)
- RAG 재임베딩 대기 상태

**Exception Flow**:

- E1: 아이템 개수 5개 초과 → 400 에러 "최대 5개까지 추가 가능"
- E2: 파일 업로드 실패 → 500 에러 반환

### 3.2 포트폴리오 아이템 수정

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 기존 아이템 수정

**Main Flow**:

1. itemId로 수정할 아이템 식별
2. PortfolioItemDto로 업데이트
3. portfolioItems 배열 내 해당 아이템만 수정
4. processingStatus.needsEmbedding = true

**Post-condition**:

- 아이템 수정 완료
- RAG 재임베딩 대기 상태

### 3.3 포트폴리오 아이템 삭제

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 특정 아이템 삭제

**Main Flow**:

1. itemId로 삭제할 아이템 식별
2. portfolioItems 배열에서 제거
3. 첨부파일이 있으면 FileStorageClient로 파일 삭제
4. processingStatus.needsEmbedding = true

**Post-condition**:

- 아이템 삭제 완료
- 관련 파일 삭제됨

### 3.4 포트폴리오 아이템 순서 변경

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 아이템 순서 재배치

**Main Flow**:

1. List<String> itemIds 순서로 요청
2. 각 아이템의 order 필드 업데이트
3. MongoDB Document 저장

**Post-condition**:

- 아이템 순서 변경 완료

---

## 4. 파일 업로드 및 OCR 처리 Use Case

### 4.1 첨부파일 업로드

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 포트폴리오 아이템에 파일 첨부

**Main Flow**:

1. MultipartFile[] 업로드
2. FileStorageClient가 로컬 파일 시스템에 저장
3. 각 파일의 attachments.filePath 반환
4. AttachmentEmbedded 생성 및 저장
    - attachments.filePath
    - extractionStatus = UNFINISHED

**Post-condition**:

- 파일이 로컬 파일 시스템에 저장됨
- MongoDB에 첨부파일 정보 저장
- OCR 처리 대기

**Exception Flow**:

- E1: 파일 크기 초과 → 400 에러
- E2: 지원하지 않는 형식 → 400 에러

### 4.2 OCR 텍스트 추출 (비동기)

**Actor**: Python FastAPI AI 서버

**Goal**: 첨부파일에서 텍스트 추출

**Main Flow**:

1. Python AI 서버가 UNFINISHED 상태의 첨부파일 감지
2. Tesseract로 OCR 처리
3. 추출된 텍스트를 임베딩에 활용
4. extractionStatus = COMPLETED
5. processingStatus.needsEmbedding = true

**Post-condition**:

- 텍스트 추출 완료
- RAG 재임베딩 트리거

---

## 5. RAG 벡터 검색 Use Case

### 5.1 임베딩 생성 (비동기)

**Actor**: Python FastAPI AI 서버

**Goal**: 포트폴리오 벡터 임베딩 생성

**Pre-condition**:

- processingStatus.needsEmbedding = true

**Main Flow**:

1. Python AI 서버가 임베딩 필요한 포트폴리오 감지
2. searchableText 생성
    - basicInfo 모든 필드
    - portfolioItems의 title, content
    - OCR로 추출된 텍스트 (별도 처리)
3. OpenAI API로 벡터 임베딩 생성
4. embeddings.kureVector 저장
5. embeddings.searchableText 저장
6. processingStatus.needsEmbedding = false
7. processingStatus.lastProcessed 업데이트

**Post-condition**:

- 벡터 임베딩 완료
- 검색 가능 상태

### 5.2 자연어 기반 포트폴리오 검색

**Actor**: 채용담당자(RECRUITER)

**Goal**: 자연어 쿼리로 구직자 검색

**Main Flow**:

1. 채용담당자가 검색 쿼리 입력 (예: "자바 스프링 백엔드 개발자")
2. Spring Boot SearchController가 Python AI 서버로 요청 전달
3. Python LLMService가 쿼리 의도 분석
4. RAGPipeline이 쿼리 벡터화
5. VectorSearch가 MongoDB에서 유사도 검색
6. 매칭 결과를 Spring Boot로 반환
7. SearchResultDto 리스트 반환
    - portfolioId
    - candidateName
    - relevanceScore
    - matchingReasons

**Post-condition**:

- 관련도 높은 포트폴리오 검색 결과 반환

---

## 6. 포트폴리오 삭제 Use Case

### 6.1 포트폴리오 전체 삭제

**Actor**: 구직자(JOB_SEEKER)

**Goal**: 포트폴리오 완전 삭제

**Main Flow**:

1. 구직자가 삭제 요청
2. 첨부파일 존재 시 FileStorageClient로 파일 삭제
3. MongoDB PortfolioDocument 삭제
4. PostgreSQL JobSeekerProfile의 portfolioId NULL 처리

**Post-condition**:

- 포트폴리오 및 관련 파일 완전 삭제

---

## 7. 시스템 아키텍처 (배치 다이어그램 기반)

### 7.1 서비스 구성

`[React Frontend] ↓ HTTP [Spring Boot (8080)] ↓ JPA → PostgreSQL (5432) - User/Profile ↓ MongoDB Driver → MongoDB (27017) - Portfolio ↓ REST → Python FastAPI (8000) - AI 처리 ↓ PyMongo → MongoDB (27017) - Vector Search ↓ HTTPS → OpenAI API - Embedding`

### 7.2 데이터 흐름

1. **포트폴리오 생성/수정**: Spring Boot → MongoDB
2. **파일 업로드**: Spring Boot → 로컬 파일 시스템
3. **OCR 처리**: Python FastAPI → 로컬 파일 시스템 → MongoDB
4. **임베딩 생성**: Python FastAPI → OpenAI → MongoDB
5. **벡터 검색**: Python FastAPI → MongoDB Vector Search

---

## 8. API 엔드포인트 (프로토타입 핵심)

### Portfolio API

- `POST /api/portfolios` - 포트폴리오 생성
- `GET /api/portfolios/me` - 내 포트폴리오 조회
- `PUT /api/portfolios/basic-info` - 기본정보 수정
- `POST /api/portfolios/items` - 아이템 추가
- `PUT /api/portfolios/items/{itemId}` - 아이템 수정
- `DELETE /api/portfolios/items/{itemId}` - 아이템 삭제
- `PUT /api/portfolios/items/reorder` - 아이템 순서 변경
- `DELETE /api/portfolios` - 포트폴리오 삭제
- `POST /api/portfolios/trigger-embedding` - 수동 임베딩 트리거

### Search API (Python FastAPI 경유)

- `POST /api/search/portfolios` - 자연어 검색
```